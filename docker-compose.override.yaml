# Local development specific config
version: '3.8'

services:
  traefik:
    command:
      - --log.level=DEBUG
      - --log.format=common
      - --providers.docker=true
      - --providers.docker.swarmmode=false
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --api.insecure=true
    ports:
      - 80:80
      - 8080:8080
    labels:
      - 'traefik.docker.network=web-public'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  db:
    restart: always
    healthcheck:
      test: pg_isready -U postgres -h 127.0.0.1
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: dev
    ports:
      - 5432:5432
    volumes:
      - dbdata:/var/lib/postgresql/data
      # Runs a custom init script. NOTE: It will be ignored if database already exists. Might need to delete dbdata volume
      - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql

  redis:
    healthcheck:
      test: redis-cli ping

  api:
    build:
      context: api
      target: dev
    environment:
      POSTGRES_DB: dev
      POSTGRES_PASSWORD: postgres
      COOKIE_SECRET: 'kiu7654rt654esdfty67ujhgyt54re'
      DOMAIN: 'http://localhost'
    volumes:
      - ./api:/app/api
    ports:
      - 9229 # Debugger
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      traefik.enable: 'true'
      # Path will override other possible localhost/api endpoints
      traefik.http.routers.node-api.rule: 'Host(`localhost`) && PathPrefix(`/api`)'
      traefik.http.routers.node-api.entrypoints: web
      traefik.docker.network: web-public
      traefik.http.services.node-api.loadbalancer.server.port: 4000
      # Define and apply prefix-strip middleware. Hitting localhost/api will return api service / home route
      traefik.http.middlewares.node-api-stripprefix.stripprefix.prefixes: /api
      traefik.http.routers.node-api.middlewares: node-api-stripprefix@docker
    restart: unless-stopped
    # Eable colorized logs
    tty: true
    stdin_open: false

  webclient:
    build:
      context: web
      target: dev
    volumes:
      - ./web:/app
    networks:
      - web
    labels:
      traefik.enable: 'true'
      traefik.http.routers.webclient.rule: Host(`localhost`)
      traefik.http.routers.webclient.entrypoints: web
      traefik.docker.network: web-public
      traefik.http.services.webclient.loadbalancer.server.port: 3000
    restart: unless-stopped
    # Eable colorized logs
    tty: true
    stdin_open: false

  portainer:
    image: portainer/portainer-ce
    networks:
      - web
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.portainer.rule=Host(`portainer.localhost`)'
      - 'traefik.http.routers.portainer.entrypoints=web'
      - 'traefik.docker.network=web-public'
      - 'traefik.http.services.portainer.loadbalancer.server.port=9000'
    restart: always
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'

  pgadmin:
    restart: unless-stopped
    image: dpage/pgadmin4:5.3
    environment:
      PGADMIN_DEFAULT_EMAIL: 'admin@pgadmin.com'
      PGADMIN_DEFAULT_PASSWORD: 'password'
      PGADMIN_LISTEN_PORT: 80
    ports:
      - 15432:80
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmindata:/var/lib/pgadmin
    networks:
      - internal
